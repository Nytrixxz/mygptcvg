import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS active_chats (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        message TEXT,
        support_id INTEGER
    )
    ''')
    
    conn.commit()
    conn.close()

init_db()

API_TOKEN = '8457541784:AAHC2nuek7e0TUh-VHsXZvMesfhUXacIpTA'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

SUPPORT_IDS = [6371055894]  # –í–∞—à ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

class Form(StatesGroup):
    waiting_for_support_message = State()
    waiting_for_support_reply = State()
    in_dialog = State()

def get_user_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")]
    ], resize_keyboard=True)
    return keyboard

def get_support_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥")]
    ], resize_keyboard=True)
    return keyboard

def save_active_chat(user_id: int, username: str, first_name: str, last_name: str, message: str, support_id: int = None):
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    
    if support_id:
        cursor.execute('''
        INSERT OR REPLACE INTO active_chats 
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, message, support_id))
    else:
        cursor.execute('''
        INSERT OR REPLACE INTO active_chats 
        (user_id, username, first_name, last_name, message) 
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, message))
    
    conn.commit()
    conn.close()

def delete_active_chat(user_id: int):
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM active_chats WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def get_active_chats():
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM active_chats')
    chats = cursor.fetchall()
    conn.close()
    return {chat[0]: chat[1:] for chat in chats}

def get_support_chats(support_id: int):
    conn = sqlite3.connect('support_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, first_name, last_name, message FROM active_chats WHERE support_id = ?', (support_id,))
    chats = cursor.fetchall()
    conn.close()
    return {chat[0]: chat[1:] for chat in chats}

def format_user_info(user_id: int, username: str, first_name: str, last_name: str):
    name = f"{first_name or ''} {last_name or ''}".strip()
    return (
        f"üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</b>\n"
        f"‚îú ID: <code>{user_id}</code>\n"
        f"‚îú Username: @{username if username else '–Ω–µ—Ç'}\n"
        f"‚îî –ò–º—è: {name if name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
    )

def format_support_message(message: str, support_name: str = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"):
    return (
        f"üí¨ <b>{support_name}</b>\n"
        f"‚îî {message}\n\n"
        f"<i>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>"
    )

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    
    if message.from_user.id in SUPPORT_IDS:
        active_chats = get_support_chats(message.from_user.id)
        if active_chats:
            await message.answer(
                "üë®‚Äçüíª <b>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:",
                reply_markup=get_support_keyboard(),
                parse_mode='HTML'
            )
            await show_active_requests(message)
        else:
            await message.answer(
                "üë®‚Äçüíª <b>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏.",
                reply_markup=get_support_keyboard(),
                parse_mode='HTML'
            )
    else:
        active_chats = get_active_chats()
        if message.from_user.id in active_chats:
            *_, support_id = active_chats[message.from_user.id]
            if support_id:
                await message.answer(
                    "üîπ <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.</b>\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    reply_markup=ReplyKeyboardRemove(),
                    parse_mode='HTML'
                )
                await state.set_state(Form.in_dialog)
                return
        
        await message.answer(
            "‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Work Shop!</b> ‚ú®\n\n"
            "–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ. "
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑.\n\n"
            "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:</i>",
            reply_markup=get_user_keyboard(),
            parse_mode='HTML'
        )

@router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def contact_support(message: types.Message, state: FSMContext):
    active_chats = get_active_chats()
    if message.from_user.id in active_chats:
        await message.answer(
            "‚ö†Ô∏è <b>–í—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
            parse_mode='HTML'
        )
        return
    
    await state.set_state(Form.waiting_for_support_message)
    await message.answer(
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        "<i>–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.</i>\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ /cancel",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='HTML'
    )

@router.message(Form.waiting_for_support_message)
async def process_support_message(message: types.Message, state: FSMContext):
    user = message.from_user
    save_active_chat(
        user.id, 
        user.username, 
        user.first_name, 
        user.last_name, 
        message.text
    )
    
    for support_id in SUPPORT_IDS:
        try:
            await bot.send_message(
                support_id,
                "üÜï <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
                f"üìÑ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text}\n\n"
                f"üë§ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user.id}</code>\n\n"
                "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã'</i>",
                reply_markup=get_support_keyboard(),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ {support_id}: {e}")
    
    await message.answer(
        "‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\n\n"
        "<i>–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–∞—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.</i>",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='HTML'
    )
    await state.set_state(Form.in_dialog)

@router.message(F.text == "üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", F.from_user.id.in_(SUPPORT_IDS))
async def show_active_requests(message: types.Message):
    active_chats = get_active_chats()
    if not active_chats:
        await message.answer(
            "‚ÑπÔ∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</b>",
            parse_mode='HTML'
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for user_id, (username, first_name, last_name, msg, support_id) in active_chats.items():
        if support_id is None:
            short_msg = (msg[:25] + '...') if len(msg) > 25 else msg
            btn_text = f"üë§ {user_id}: {short_msg}"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=btn_text, callback_data=f"support_chat_{user_id}")
            ])
    
    if not keyboard.inline_keyboard:
        await message.answer(
            "‚ÑπÔ∏è <b>–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n"
            "<i>–í—Å–µ –¥–∏–∞–ª–æ–≥–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã.</i>",
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )

@router.callback_query(F.data.startswith("support_chat_"), F.from_user.id.in_(SUPPORT_IDS))
async def process_support_chat_selection(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split('_')[-1])
    support_id = callback.from_user.id
    
    active_chats = get_active_chats()
    if user_id not in active_chats:
        await callback.answer("–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
        await callback.message.delete()
        return
    
    username, first_name, last_name, msg, _ = active_chats[user_id]
    save_active_chat(user_id, username, first_name, last_name, msg, support_id)
    
    await state.set_state(Form.waiting_for_support_reply)
    await state.update_data(user_id=user_id)
    
    try:
        # –ö—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "üíé <b>–° –≤–∞–º–∏ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é.\n"
            "<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
    await callback.message.answer(
        format_user_info(user_id, username, first_name, last_name) + "\n\n" +
        f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{msg}\n\n" +
        "<i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>",
        reply_markup=get_support_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()

@router.message(Form.waiting_for_support_reply)
async def process_support_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    support_id = message.from_user.id
    
    active_chats = get_active_chats()
    if user_id not in active_chats or active_chats[user_id][4] != support_id:
        await message.answer(
            "‚ö†Ô∏è <b>–≠—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–∫—Ä—ã—Ç</b>",
            parse_mode='HTML'
        )
        await state.clear()
        return
    
    try:
        # –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await bot.send_message(
            user_id,
            format_support_message(message.text, "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ WorkShop"),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='HTML'
        )
        await message.answer(
            "‚úÖ <b>–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é</b>",
            parse_mode='HTML'
        )
    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
            f"<i>–û—à–∏–±–∫–∞: {e}</i>",
            parse_mode='HTML'
        )
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@router.message(F.text == "‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", F.from_user.id.in_(SUPPORT_IDS), Form.waiting_for_support_reply)
async def close_support_chat(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    
    delete_active_chat(user_id)
    
    try:
        await bot.send_message(
            user_id,
            "üîí <b>–î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n"
            "<i>–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.</i>",
            reply_markup=get_user_keyboard(),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await message.answer(
        "üóÇ <b>–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç</b>",
        reply_markup=get_support_keyboard(),
        parse_mode='HTML'
    )
    await state.clear()

@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    user_id = message.from_user.id
    
    if current_state == Form.waiting_for_support_message:
        delete_active_chat(user_id)
        await state.clear()
        await message.answer(
            "‚ùå <b>–ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω—ë–Ω</b>",
            reply_markup=get_user_keyboard(),
            parse_mode='HTML'
        )
    elif current_state == Form.in_dialog:
        active_chats = get_active_chats()
        if user_id in active_chats:
            *_, support_id = active_chats[user_id]
            if support_id:
                try:
                    await bot.send_message(
                        support_id,
                        f"‚ö†Ô∏è <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥</b>",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            delete_active_chat(user_id)
        
        await state.clear()
        await message.answer(
            "üëã <b>–î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω</b>",
            reply_markup=get_user_keyboard(),
            parse_mode='HTML'
        )

@router.message(Form.in_dialog)
async def handle_user_reply(message: types.Message):
    user_id = message.from_user.id
    active_chats = get_active_chats()
    
    if user_id in active_chats and active_chats[user_id][4] is not None:
        support_id = active_chats[user_id][4]
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            username, first_name, last_name, _, _ = active_chats[user_id]
            user_info = format_user_info(user_id, username, first_name, last_name)
            
            await bot.send_message(
                support_id,
                f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è</b>\n\n"
                f"{user_info}\n\n"
                f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text}",
                parse_mode='HTML'
            )
        except Exception as e:
            await message.answer(
                "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–Ω–æ–≤–∞.</i>",
                parse_mode='HTML'
            )
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–µ {support_id}: {e}")

@router.message()
async def handle_text_messages(message: types.Message):
    user_id = message.from_user.id
    
    if user_id in SUPPORT_IDS:
        await message.answer(
            "üë®‚Äçüíª <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏</b>",
            reply_markup=get_support_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "üõçÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ</b>",
            reply_markup=get_user_keyboard(),
            parse_mode='HTML'
        )

async def main():
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    active_chats = get_active_chats()
    for user_id, (username, first_name, last_name, msg, support_id) in active_chats.items():
        if support_id is not None:
            try:
                user_info = format_user_info(user_id, username, first_name, last_name)
                await bot.send_message(
                    support_id,
                    "‚ôªÔ∏è <b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω</b>\n\n"
                    f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥:\n{user_info}\n\n"
                    f"üì© <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{msg}\n\n"
                    "<i>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –¥–∏–∞–ª–æ–≥.</i>",
                    reply_markup=get_support_keyboard(),
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É {support_id}: {e}")
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
